generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id            String        @id
  text          String
  createdAt     DateTime      @default(now())
  authorId      String
  postId        String
  replyToId     String?
  commentId     String?
  User          User          @relation(fields: [authorId], references: [id])
  Post          Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  Comment       Comment?      @relation("CommentToComment", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Comment Comment[]     @relation("CommentToComment")
  CommentVote   CommentVote[]
}

model CommentVote {
  userId    String
  commentId String
  type      VoteType
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model Post {
  id          String    @id
  title       String
  content     Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  authorId    String
  subredditId String
  Comment     Comment[]
  User        User      @relation(fields: [authorId], references: [id])
  Subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  Vote        Vote[]
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subreddit {
  id           String         @id
  name         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  creatorId    String?
  Post         Post[]
  User         User?          @relation(fields: [creatorId], references: [id])
  Subscription Subscription[]

  @@index([name])
}

model Subscription {
  userId      String
  subredditId String
  role        SubReditRole @default(Normal)
  id          String       @id
  Subreddit   Subreddit    @relation(fields: [subredditId], references: [id])
  User        User         @relation(fields: [userId], references: [id])

  @@unique([userId, subredditId])
}

model User {
  id            String         @id
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  username      String?        @unique
  Account       Account[]
  Comment       Comment[]
  CommentVote   CommentVote[]
  Post          Post[]
  Session       Session[]
  Subreddit     Subreddit[]
  Subscription  Subscription[]
  Vote          Vote[]
}

model Vote {
  userId String
  postId String
  type   VoteType
  Post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User   User     @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

enum SubReditRole {
  Normal
  Moderator
}

enum VoteType {
  UP
  DOWN
}
